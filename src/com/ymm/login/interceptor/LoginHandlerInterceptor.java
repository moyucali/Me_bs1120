package com.ymm.login.interceptor;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;

/**
 * @author Arica
 *
 */
public class LoginHandlerInterceptor extends HandlerInterceptorAdapter {
	private final Logger log = LoggerFactory.getLogger(LoginHandlerInterceptor.class);

	/**
	 * 在业务处理器处理请求之前被调用 如果返回false 从当前的拦截器往回执行所有拦截器的afterCompletion(),再退出拦截器链
	 * 如果返回true 执行下一个拦截器,直到所有的拦截器都执行完毕 再执行被拦截的Controller 然后进入拦截器链,
	 * 从最后一个拦截器往回执行所有的postHandle() 接着再从最后一个拦截器往回执行所有的afterCompletion()
	 */
	@Override
	public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)
			throws Exception {
		// 用法等同于equals但是忽略大小写
		String urlMethod = "POST";
		if (urlMethod.equalsIgnoreCase(request.getMethod())) {
			log.info("type:" + request.getMethod());
			log.info("==============执行顺序: 1、preHandle================");
			String requestUri = request.getRequestURI();
			String contextPath = request.getContextPath();
			String url = requestUri.substring(contextPath.length());
			String host = request.getRemoteHost();
			log.info("requestUri:" + requestUri);
			log.info("contextPath:" + contextPath);
			log.info("url:" + url);
			log.info("IP为---->>> " + host + " <<<-----访问了系统");
			String loginUrl = "login";
			if (requestUri.contains(loginUrl)) {
				log.info("LoginHandlerInterceptor：验证通过：跳转到login！");
				return true;
			} else {
				log.info("LoginHandlerInterceptor：验证失败：跳转到error页面！");
				request.getRequestDispatcher("error.jsp").forward(request, response);
				return false;
			}
		} else {
			return false;
		}

	}

	/**
	 * 在业务处理器处理请求执行完成后,生成视图之前执行的动作 可在modelAndView中加入数据，比如当前时间
	 */
	@Override
	public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,
			ModelAndView modelAndView) throws Exception {
		log.info("==============执行顺序: 2、postHandle================");
		if (modelAndView != null) {
			// 加入当前时间
			modelAndView.addObject("var", "测试postHandle");
		}
	}

	/**
	 * 在DispatcherServlet完全处理完请求后被调用,可用于清理资源等
	 * 
	 * 当有拦截器抛出异常时,会从当前拦截器往回执行所有的拦截器的afterCompletion()
	 */
	@Override
	public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)
			throws Exception {
		log.info("==============执行顺序: 3、afterCompletion================");
	}

}
